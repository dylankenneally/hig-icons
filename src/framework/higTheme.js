/* Material UI theme object for based on Autodesk HIG styling
	- Material UI themes: https://material-ui.com/customization/themes/
	- Helpful reference for the objects contents: https://material-ui.com/customization/default-theme/
	- Autodesk HIG: https://hig.autodesk.com/
	- HIG data set: https://github.com/Autodesk/hig/tree/development/packages/theme-data
	- HIG components in action: http://storybook.hig.autodesk.com

	Note that we (Autodesk) have a project coming that would allow us to `npm install hig-theme-thingy`
		- that project is being implemented by @tltowles - see tltowles:feat/mui-themes-1816, https://github.com/Autodesk/hig/pull/1835
		- at the time of writing, 03/June/19, that PR is stalled, so @kennead has brought the data it generates in manually, to the ./mui-hig/ directory
		- please do not modify that folders' contents, if we generate that data again your modifications may be lost

	Note that this theme is **not complete, https://jira.autodesk.com/browse/SCM-338 tracks progress
*/

// These are the themes generated by Tim's work, see notes above.
import lightGrayMediumDensityTheme from './mui-hig/lightGrayMediumDensityTheme';	// ADSK default
// import lightGrayHighDensityTheme from './mui-hig/lightGrayHighDensityTheme';
// import darkGrayMediumDensityTheme from './mui-hig/darkGrayMediumDensityTheme';
// import darkGrayHighDensityTheme from './mui-hig/darkGrayHighDensityTheme';
// import darkBlueMediumDensityTheme from './mui-hig/darkBlueMediumDensityTheme';
// import darkBlueHighDensityTheme from './mui-hig/darkBlueHighDensityTheme';
// import webLightMediumDensityTheme from './mui-hig/webLightMediumDensityTheme';
// import webLightHighDensityTheme from './mui-hig/webLightHighDensityTheme';

const higTheme = lightGrayMediumDensityTheme;

higTheme.typography.title = {
	color: higTheme.resolvedRoles['basics.colors.textAgainstLight'],
	textTransform: 'uppercase',
};

higTheme.typography.headline = {
	color: higTheme.resolvedRoles['basics.colors.textAgainstLight'],
};

higTheme.typography.subheading = {
	fontSize: higTheme.resolvedRoles['basics.fontSizes.mediumMedium'],
	color: higTheme.resolvedRoles['basics.colors.textAgainstLight'],
};

higTheme.typography.colorPrimary = higTheme.resolvedRoles['colorScheme.textColor'];
higTheme.typography.colorTextSecondary = higTheme.resolvedRoles['colorScheme.textColorDim'];

higTheme.overrides.MuiButton.root.textTransform = 'capitalize';

higTheme.overrides.MuiButton.text['& svg * '] = {};
higTheme.overrides.MuiButton.text['&:hover']['& svg * '] = {};
higTheme.overrides.MuiButton.text['&:focus']['& svg * '] = {};
higTheme.overrides.MuiButton.text['&:active']['& svg * '] = {};
higTheme.overrides.MuiButton.outlined['& svg * '] = {};
higTheme.overrides.MuiButton.outlined['&:hover']['& svg * '] = {};
higTheme.overrides.MuiButton.outlined['&:focus']['& svg * '] = {};
higTheme.overrides.MuiButton.outlined['&:active']['& svg * '] = {};
higTheme.overrides.MuiButton.contained['& svg * '] = {};
higTheme.overrides.MuiButton.contained['&:hover']['& svg * '] = {};
higTheme.overrides.MuiButton.contained['&:focus']['& svg * '] = {};
higTheme.overrides.MuiButton.contained['&:active']['& svg * '] = {};

higTheme.overrides.MuiButton.text['&:hover'].boxShadow =
	`${higTheme.resolvedRoles['colorScheme.accentColor']} 0 0 0 2px`;

higTheme.overrides.MuiIconButton = {
	root: {
		'&:hover': {
			color: higTheme.resolvedRoles['iconButton.hover.iconColor'],
			backgroundColor: '#00000000',
		},
	},
	colorSecondary: {
		'&:hover': {
			backgroundColor: '#00000000',
		},
	},
	label: {
		'&:hover': {
			borderRadius: '50%',
			boxShadow: `${higTheme.resolvedRoles['button.outline.hover.halo.color']} 0px 0px 0px 2px inset`,
		},
		'&:focus': {
			outline: '-webkit-focus-ring-color auto 1px',
		},
	},
};

higTheme.overrides.MuiCheckbox = {
	root: {
		'&:hover': {
			color: higTheme.resolvedRoles['iconButton.hover.iconColor'],
			backgroundColor: 'rgb(128, 128, 128)',
		},
		borderRadius: higTheme.resolvedRoles['checkbox.borderRadius'],
		color: higTheme.resolvedRoles['checkbox.borderColor'],
		borderWidth: higTheme.resolvedRoles['checkbox.borderWidth'],
		'&:checked': {
			color: 'red',
		}
	},
	colorSecondary: {
		'&:hover': {
			backgroundColor: '#00000000',
		},
	},
};

higTheme.overrides.MuiCircularProgress = {
	colorPrimary: {
		color: higTheme.resolvedRoles['colorScheme.accentColor'],
	}
};

higTheme.overrides.MuiFormLabel = {
	root: {
		color: higTheme.resolvedRoles['label.fontColor'],
		'&$focused': {
			color: higTheme.resolvedRoles['colorScheme.accentColor'],
		}
	},
};

higTheme.overrides.MuiGridListTile = {
	root: {
		cursor: 'pointer'
	}
};

higTheme.overrides.MuiInput = {
	root: {
		minHeight: higTheme.resolvedRoles['input.height'],
		borderRadius: higTheme.resolvedRoles['input.borderRadius'],
		borderColor: higTheme.resolvedRoles['input.borderColor'],
		borderBottomColor: higTheme.resolvedRoles['input.borderBottomColor'],
		borderBottomWidth: higTheme.resolvedRoles['input.borderBottomWidth'],
		color: higTheme.resolvedRoles['input.fontColor'],
		fontWeight: higTheme.resolvedRoles['label.fontWeight'],
		fontSize: higTheme.resolvedRoles['input.fontSize'],
		'&$disabled': {
			borderColor: higTheme.resolvedRoles['input.box.borderBottomColor'],
			color: higTheme.resolvedRoles['tabs.general.tab.disabled.fontColor'], // ?????
		}
	},
};

higTheme.overrides.MuiList = {
	root: {
		backgroundColor: higTheme.resolvedRoles['basics.colors.surfaceLightGrayLevel350'],
	},
	padding: {
		paddingTop: '0px',
		paddingBottom: '0px',
	}
};

higTheme.overrides.MuiMenuItem = {
	root: {
		fontWeight: higTheme.resolvedRoles['label.fontWeight'],
		fontSize: higTheme.resolvedRoles['input.fontSize'],
		color: higTheme.resolvedRoles['input.fontColor'],
		backgroundColor: higTheme.resolvedRoles['menu.item.backgroundColor'],
		borderRadius: higTheme.resolvedRoles['menu.borderRadius'],
		minHeight: higTheme.resolvedRoles['menu.item.minHeight'],
		'&:hover': {
			backgroundColor: higTheme.resolvedRoles['menu.item.hover.backgroundColor'],
		},
		'&:focus': {
			backgroundColor: higTheme.resolvedRoles['menu.item.focus.backgroundColor'],
		},
		'&:active': {
			backgroundColor: higTheme.resolvedRoles['menu.item.active.backgroundColor'],
		},
		minWidth: '100px', // not pard of HIG, just looks rubbish without this
	},
	gutters: {
		paddingBottom: parseInt(higTheme.resolvedRoles['menu.item.verticalPadding'], 10) / 2 + 'px',
		paddingTop: parseInt(higTheme.resolvedRoles['menu.item.verticalPadding'], 10) / 2 + 'px',

		paddingLeft: parseInt(higTheme.resolvedRoles['menu.item.horizontalPadding'], 10) / 2 + 'px',
		paddingRight: parseInt(higTheme.resolvedRoles['menu.item.horizontalPadding'], 10) / 2 + 'px',
	},
};

higTheme.overrides.MuiPaper = {
	rounded: {
		borderRadius: 'unset', // higTheme.resolvedRoles['menu.borderRadius'],
	}
};

higTheme.overrides.MuiRadio = {
	root: {
		color: `${higTheme.resolvedRoles['checkbox.borderColor']}`,
		backgroundColor: '#00000000',
	},
};

higTheme.overrides.MuiFormControlLabel = {
	label: {
		paddingLeft: higTheme.resolvedRoles['basics.spacings.highExtraSmall'],
	}
};

higTheme.overrides.PrivateRadioButtonIcon = {
	checked: {
		color: 'rgb(128, 128, 128)',
	},
};

higTheme.overrides.MuiSvgIcon = {
	root: {
		flexShrink: 'unset',
		width: higTheme.resolvedRoles['checkbox.width'],
		height: higTheme.resolvedRoles['checkbox.height'],
	},
};

higTheme.overrides.MuiSnackbar = {
	/* HIG notification toasts are always on the right, not left;
		NB: this is the default, if you don't specify 'anchorOrigin' in <Snackbar />.
		Caution: an anchorOrigin specified as bottom center will be bottom right because of this. */
	anchorOriginBottomCenter: {
	 	'@media (min-width: 960px)': {
			left: 'auto',
			transform: 'none'
		}
	},
};

higTheme.overrides.MuiDialogTitle = {
	root: {
		height: higTheme.resolvedRoles['modal.header.height'],
	}
};

higTheme.overrides.MuiDialogContentText = {
	root: {
		whiteSpace: 'pre-line',
		color: higTheme.resolvedRoles['modal.textColor'],
	}
};

higTheme.overrides.MuiAppBar = {
	colorPrimary: {
		backgroundColor: higTheme.resolvedRoles['colorScheme.component.backgroundColor'],
	},
};

higTheme.overrides.MuiLinearProgress = {
	root: {
		borderRadius: higTheme.resolvedRoles['progressBar.borderRadius'],
		height: higTheme.resolvedRoles['progressBar.height'],
	},
	colorPrimary: {
		backgroundColor: higTheme.resolvedRoles['progressBar.backgroundColor'],
	},
	barColorPrimary: {
		backgroundColor: higTheme.resolvedRoles['progressBar.highlightColor'],
	},
};

export default higTheme;
